<?php
/**
 * @file
 * Code for the Bibsdb XML sonderborg.dk feature.
 */

include_once 'bibsdb_xml_sonderborg_dk.features.inc';

/**
* Implements hook_theme().
*/
function bibsdb_xml_sonderborg_dk_theme() {
  return array(
    'bibsdb_xml_sonderborg_dk_bibsdb_p2b_url' => array(
      'variables' => array('url' => NULL),
    ),
    'bibsdb_xml_sonderborg_dk_bibsdb_p2b_sold_out' => array(
      'variables' => array('sold_out' => NULL),
    ),
    'bibsdb_xml_sonderborg_dk_bibsdb_event_location' => array(
      'variables' => array('sold_out' => NULL),
    ),
  );
}

/**
* Implements hook_field_formatter_info().
*/
function bibsdb_xml_sonderborg_dk_field_formatter_info() {
  $info = array(
    'bibsdb_p2b_url' => array(
      'label' => t('The place2book url of the event'), 
      'field types' => array('text'),
      'description' => t('The place2book url of an event.'),
    ), 
    'bibsdb_p2b_sold_out' => array(
      'label' => t('Boolean. 1 if sold out. 0 if available.'), 
      'field types' => array('text'),
      'description' => t('Boolean. 1 if sold out. 0 if available.'),
    ), 
    'bibsdb_event_location' => array(
      'label' => t('Location address merged with library address.'), 
      'field types' => array('addressfield'),
      'description' => t('Location address merged with library address.'),
    ), 
  );
  return $info;
}

/**
 * Implements hook_field_formatter_view().
 * This code just passes straight through to a theme function.
 */
function bibsdb_xml_sonderborg_dk_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  foreach ($items as $delta => $item) {
    $element = array('entity' => $entity, 'field' => $field);
    $elements[$delta] = array(
      '#markup' => theme('bibsdb_xml_sonderborg_dk_'. $display['type'], $element),
    );
  }

  return $elements;
}


/**
* Theme function for the bibsdb_event_location field formatter.
*/
function theme_bibsdb_xml_sonderborg_dk_bibsdb_event_location($element) {

  // Create xml structure
  $data = array();
  $data['name'] = "";
  $data['address1'] = "";
  $data['address2'] = "";
  $data['postalcode'] = "";
  $data['city'] = "";
  $data['phone'] = "";
  $data['email'] = "";

  //-- set location data --
  // If library has been selected, use location data from the library.
  // It is possible to select more than one library.
  // This makes no sense in a place2book context where only one location
  // can be printed on the ticket. So let's choose the last one.

  $event_wrapper = entity_metadata_wrapper('node', $element['entity']);

  $library_id = 0;

  foreach ($event_wrapper->og_group_ref->getIterator() as $delta => $library_wrapper) {
    $library_id = $library_wrapper->getIdentifier();
  }

  if ($library_id) {
    $libloc_result = db_query('SELECT   n.title,
                  a.field_ding_library_addresse_thoroughfare AS street,
                  a.field_ding_library_addresse_premise AS additional,
                  a.field_ding_library_addresse_postal_code AS postal_code,
                  a.field_ding_library_addresse_locality AS city
                  FROM node n JOIN field_data_field_ding_library_addresse a
                  ON n.nid = a.entity_id
                  WHERE n.nid = :nid', array(':nid' => $library_id));

    foreach ($libloc_result as $libloc) {
      $data['name'] = $libloc->title;
      $data['address1'] = $libloc->street;
      $data['address2'] = $libloc->additional;
      $data['postalcode'] = $libloc->postal_code;
      $data['city'] = $libloc->city;
      $data['phone'] = $library_wrapper->field_ding_library_phone_number->value();
      $data['email'] = $library_wrapper->field_ding_library_mail->value();
    }
  }

  // If node provides other location data, override the above location data
  // where possible
  
  // The check is only made for venue street address - if it is not there, the rest is not used either
  $field_address = field_get_items('node', $element['entity'], 'field_ding_event_location');
  if (!empty($field_address[0]['thoroughfare'])) {
    $data['name'] = $field_address[0]['name_line'];
    $data['address1'] = $field_address[0]['thoroughfare'];
    $data['address2'] = $field_address[0]['premise'];
    $data['postalcode'] = $field_address[0]['postal_code'];
    $data['city'] = $field_address[0]['locality'];
  }


  $output = "";
  $output .= "<name>" . $data['name'] . "</name>";
  $output .= "<address1>" . $data['address1'] . "</address1>";
  $output .= "<address2>" . $data['address2'] . "</address2>";
  $output .= "<postalcode>" . $data['postalcode'] . "</postalcode>";
  $output .= "<city>" . $data['city'] . "</city>";
  $output .= "<email>" . $data['email'] . "</email>";
  $output .= "<phone>" . $data['phone'] . "</phone>";

  // Erstat & med html &amp
  $output=preg_replace('/&(?!#?[a-z0-9]+;)/', '&amp;', $output);

  return $output;
}


/**
* Theme function for the bibsdb_p2b_url field formatter.
*/
function theme_bibsdb_xml_sonderborg_dk_bibsdb_p2b_url($element) {
	$wrapper = entity_metadata_wrapper('node', $element['entity']);
	$url =  $GLOBALS['base_url'] . '/ding/place2book/ticketinfo/' . $wrapper->getIdentifier();
	$json = file_get_contents($url);
	$obj = json_decode($json);  

	// If markup is null the event is passive
	if (!is_null($obj->markup)) {
    //Extract the url from the markup
  	$dom = new DOMDocument;
    $dom->loadHTML($obj->markup);
    foreach ($dom->getElementsByTagName('a') as $node) {
        return $node->getAttribute( 'href' );
    }
  }
}

/**
* Theme function for the bibsdb_p2b_sold_out field formatter.
*/
function theme_bibsdb_xml_sonderborg_dk_bibsdb_p2b_sold_out($element) {
	$wrapper = entity_metadata_wrapper('node', $element['entity']);
	$url =  $GLOBALS['base_url'] . '/ding/place2book/ticketinfo/' . $wrapper->getIdentifier();
	$json = file_get_contents($url);
	$obj = json_decode($json);

	// If markup is null the event is passive and sold_out tag should be hidden
	if (is_null($obj->markup)) {
  	return '';
  }

  // If markup contains "Udsolgt" return true, else return false
  if (strpos($obj->markup,'Udsolgt') !== false) {
		return 'true';
	}
	return 'false';
}
